<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAABMLAAATCwAAAAAAAAAA
        AAAjIyMSEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
        EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIjIyMNDQ0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAANDQ0SEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS
        EhISEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBQQCAQEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAACAgERDw4BAgIAAAAAAAAAAAAkHBpSQTwzKSYIBgYA
        AAAAAAAAAAAAAAAAAAAFBANFNjI3LSoHBgYAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAyKCVZRUBsVU94X1gLCAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAALCQg9MS0BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASEhISEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS
        EhINDQ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANDQ0jIyMSEhISEhISEhISEhISEhISEhIS
        EhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIS
        EhISEhISEhISEhIjIyMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>